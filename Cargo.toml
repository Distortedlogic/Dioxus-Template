[workspace.package]
authors = []
description = ""
edition = "2021"
license = ""
repository = ""

[workspace]
members = ["alpha-omega", "alpha-omega/cli", "dx-toml-schema"]
resolver = "2"

[profile.dev.package."*"]
codegen-units = 1
debug = false
incremental = false
opt-level = "z"
strip = true


[profile.release]
codegen-units = 1
debug = false
incremental = false
lto = true
opt-level = "z"
panic = "abort"
strip = true

[workspace.dependencies]

# To Remove
chatgpt_rs = "1.2.3"

# Misc
# Datatypes
android_logger = "0.14.1"
anyhow = "1.0.92"
axum = { version = "0.7.7", features = ["multipart"] }
base64 = { version = "0.22.1" }
chrono = { version = "0.4.38", features = ["serde"] }
ciborium = { version = "0.2.2" }
clap = { version = "4.5.20", features = ["derive"] }
comrak = { version = "0.29.0" }
const_format = "0.2.33"
convert_case = "0.6.0"
cornucopia = { version = "0.9.0" }
cornucopia_async = { version = "0.6.0", features = ["with-serde_json-1"] }
deadpool-postgres = { version = "0.14.0", features = ["serde"] }
dioxus = { version = "0.6.0-alpha.4" }
dioxus-web = { version = "0.6.0-alpha.4" }
dotenvy = { git = "https://github.com/allan2/dotenvy.git", features = ["macros"] }
env_logger = "0.11.5"
fake = "3.0.0"
fluent-uri = { version = "0.3.2", features = ["serde"] }
futures = "0.3.31"
hashbrown = { version = "0.15.0" }
lazy_static = "1.5.0"
misanthropic = "0.4.2"
parquet = "53.2.0"
pgvector = { version = "0.4.0", features = ["postgres"] }
polars = { version = "0.44.2", features = ["cloud", "dataframe_arithmetic", "docs-selection", "fmt", "hist", "is_unique", "regex", "serde", "serde-lazy"] }
polars-arrow = "0.44.2"
postgres = { version = "0.19.9" }
postgres-types = { version = "0.2.8", features = ["derive"] }
pulldown-cmark = "0.12.2"
rand = "0.8.5"
refinery = { version = "0.8.14", features = ["postgres", "tokio-postgres"] }
schemars = { version = "0.8.21", features = ["uuid1"] }
serde = { version = "1.0.214", features = ["derive"] }
serde_json = "1.0.132"
time = { version = "0.3.36", features = ["formatting", "serde"] }
tokio = { version = "1.41.0", features = ["full"] }
tokio-postgres = { version = "0.7.12", features = ["with-eui48-1", "with-serde_json-1", "with-time-0_3", "with-uuid-1"] }
tracing = { version = "0.1.40" }
tracing-subscriber = { version = "0.3.18", default-features = false, features = ["env-filter"] }
uuid = { version = "1.11.0", features = ["serde", "v4"] }
wasm-logger = "0.2.0"

# hyper-rustls = { version = "0.27.3", features = ["http1", "http2", "logging", "native-tokio", "ring", "tls12"] } # Rustls+hyper integration for pure rust HTTPS
# rustls = { version = "0.23.16", features = ["logging", "ring", "std", "tls12"] }                                 # Rustls is a modern TLS library written in Rust.


[workspace.lints.rust]
unsafe_code = "deny"

elided_lifetimes_in_paths = "warn"
rust_2021_idioms = "warn"
rust_2021_prelude_collisions = "warn"
semicolon_in_expressions_from_macros = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"               # `unsafe_op_in_unsafe_fn` may become the default in future Rust versions: https://github.com/rust-lang/rust/issues/71668
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"

trivial_casts = "allow"
unused_qualifications = "allow"

[workspace.lints.rustdoc]
all = "warn"
broken_intra_doc_links = "warn"
missing_crate_level_docs = "warn"

# See also clippy.toml
[workspace.lints.clippy]
as_ptr_cast_mut = "warn"
await_holding_lock = "warn"
bool_to_int_with_if = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
clear_with_drain = "warn"
cloned_instead_of_copied = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
derive_partial_eq_without_eq = "warn"
disallowed_macros = "warn"                  # See clippy.toml
disallowed_methods = "warn"                 # See clippy.toml
disallowed_names = "warn"                   # See clippy.toml
disallowed_script_idents = "warn"           # See clippy.toml
disallowed_types = "warn"                   # See clippy.toml
doc_link_with_quotes = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
from_iter_instead_of_collect = "warn"
get_unwrap = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
implied_bounds_in_impls = "warn"
imprecise_flops = "warn"
index_refutable_slice = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
into_iter_without_iter = "warn"
invalid_upcast_comparisons = "warn"
iter_not_returning_iterator = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_without_into_iter = "warn"
large_digit_groups = "warn"
large_include_file = "warn"
large_stack_arrays = "warn"
large_stack_frames = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_instant_elapsed = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
map_unwrap_or = "warn"
match_bool = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mismatched_target_os = "warn"
mismatching_type_param_order = "warn"
missing_enforced_import_renames = "warn"
missing_errors_doc = "warn"
missing_safety_doc = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
needless_pass_by_value = "warn"
negative_feature_names = "warn"
nonstandard_macro_braces = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
print_stderr = "warn"
ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
pub_without_shorthand = "warn"
rc_mutex = "warn"
readonly_write_lock = "warn"
redundant_type_annotations = "warn"
ref_option_ref = "warn"
ref_patterns = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
str_to_string = "warn"
string_add = "warn"
string_add_assign = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
string_to_string = "warn"
suspicious_command_arg_space = "warn"
suspicious_xor_used_as_pow = "warn"
todo = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
tuple_array_conversions = "warn"
unchecked_duration_subtraction = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
uninhabited_references = "warn"
uninlined_format_args = "warn"
unnecessary_box_returns = "warn"
unnecessary_safety_doc = "warn"
unnecessary_struct_initialization = "warn"
unnecessary_wraps = "warn"
unnested_or_patterns = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
unused_self = "warn"
use_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
wildcard_dependencies = "warn"
wildcard_imports = "warn"
zero_sized_map_values = "warn"


# TODO: enable more of these lints:
iter_over_hash_type = "allow"
let_underscore_untyped = "allow"
missing_assert_message = "allow"
should_panic_without_expect = "allow"
too_many_lines = "allow"
unwrap_used = "warn"                  # TODO: We really wanna warn on this one

manual_range_contains = "allow"       # this one is just worse imho
self_named_module_files = "allow"     # Disabled waiting on https://github.com/rust-lang/rust-clippy/issues/9602
significant_drop_tightening = "allow" # Too many false positives
